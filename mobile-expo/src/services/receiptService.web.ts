import apiClient from './apiClient';

export interface Receipt {
  id: number;
  receiptNumber: string;
  saleId: number;
  userId: number;
  totalAmount: number;
  taxAmount?: number;
  discountAmount?: number;
  finalAmount: number;
  paymentMethod: string;
  customerName?: string;
  customerPhone?: string;
  customerEmail?: string;
  notes?: string;
  createdAt: string;
  status: string;
  companyName?: string;
  companyAddress?: string;
  companyPhone?: string;
  companyEmail?: string;
  downloadCount?: number;
  downloadedAt?: string;
}

export interface CreateReceiptRequest {
  saleId: number;
  companyName?: string;
  companyAddress?: string;
  companyPhone?: string;
  companyEmail?: string;
  notes?: string;
}

export interface CreateReceiptResponse {
  success: boolean;
  receipt: Receipt;
  message: string;
}

export interface ReceiptsResponse {
  receipts: Receipt[];
}

/**
 * Service de gestion des re√ßus (version web)
 */
class ReceiptService {
  private baseUrl = '/api/receipts';

  /**
   * Cr√©er un nouveau re√ßu pour une vente
   */
  async createReceipt(request: CreateReceiptRequest): Promise<CreateReceiptResponse> {
    try {
      console.log('üßæ Cr√©ation d\'un re√ßu pour la vente:', request.saleId);
      
      const response = await apiClient.post(`${this.baseUrl}/create/${request.saleId}`, request);
      
      console.log('‚úÖ Re√ßu cr√©√© avec succ√®s:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Erreur cr√©ation re√ßu:', error);
      throw new Error(error.response?.data?.error || 'Erreur lors de la cr√©ation du re√ßu');
    }
  }

  /**
   * R√©cup√©rer tous les re√ßus de l'utilisateur connect√©
   */
  async getReceipts(): Promise<ReceiptsResponse> {
    try {
      console.log('üìã R√©cup√©ration des re√ßus...');
      
      const response = await apiClient.get(this.baseUrl);
      
      console.log('‚úÖ Re√ßus r√©cup√©r√©s:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Erreur r√©cup√©ration re√ßus:', error);
      throw new Error(error.response?.data?.error || 'Erreur lors de la r√©cup√©ration des re√ßus');
    }
  }

  /**
   * R√©cup√©rer un re√ßu par son ID
   */
  async getReceiptById(receiptId: number): Promise<Receipt> {
    try {
      console.log('üîç R√©cup√©ration du re√ßu:', receiptId);
      
      const response = await apiClient.get(`${this.baseUrl}/${receiptId}`);
      
      console.log('‚úÖ Re√ßu r√©cup√©r√©:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Erreur r√©cup√©ration re√ßu:', error);
      throw new Error(error.response?.data?.error || 'Erreur lors de la r√©cup√©ration du re√ßu');
    }
  }

  /**
   * R√©cup√©rer un re√ßu par son num√©ro
   */
  async getReceiptByNumber(receiptNumber: string): Promise<Receipt> {
    try {
      console.log('üîç R√©cup√©ration du re√ßu par num√©ro:', receiptNumber);
      
      const response = await apiClient.get(`${this.baseUrl}/number/${receiptNumber}`);
      
      console.log('‚úÖ Re√ßu r√©cup√©r√©:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Erreur r√©cup√©ration re√ßu:', error);
      throw new Error(error.response?.data?.error || 'Erreur lors de la r√©cup√©ration du re√ßu');
    }
  }

  /**
   * T√©l√©charger le PDF d'un re√ßu
   */
  async downloadReceiptPdf(receiptId: number): Promise<string> {
    try {
      console.log('üì• T√©l√©chargement PDF du re√ßu:', receiptId);
      
      const response = await apiClient.get(`${this.baseUrl}/${receiptId}/pdf`, {
        responseType: 'blob',
      });
      
      // Convertir le blob en base64
      const reader = new FileReader();
      return new Promise((resolve, reject) => {
        reader.onload = () => {
          const base64 = reader.result as string;
          console.log('‚úÖ PDF r√©cup√©r√© en base64');
          resolve(base64);
        };
        reader.onerror = reject;
        reader.readAsDataURL(response.data);
      });
    } catch (error: any) {
      console.error('‚ùå Erreur t√©l√©chargement PDF:', error);
      throw new Error(error.response?.data?.error || 'Erreur lors du t√©l√©chargement du PDF');
    }
  }

  /**
   * R√©cup√©rer les re√ßus r√©cemment t√©l√©charg√©s
   */
  async getRecentlyDownloadedReceipts(): Promise<ReceiptsResponse> {
    try {
      console.log('üïí R√©cup√©ration des re√ßus r√©cemment t√©l√©charg√©s...');
      
      const response = await apiClient.get(`${this.baseUrl}/recent`);
      
      console.log('‚úÖ Re√ßus r√©cents r√©cup√©r√©s:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Erreur r√©cup√©ration re√ßus r√©cents:', error);
      throw new Error(error.response?.data?.error || 'Erreur lors de la r√©cup√©ration des re√ßus r√©cents');
    }
  }
}

export default new ReceiptService();
