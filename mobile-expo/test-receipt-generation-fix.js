/**
 * Script de test pour v√©rifier la correction de g√©n√©ration de re√ßus
 *
 * Ce script teste le flux complet corrig√© :
 * 1. Authentification
 * 2. Cr√©ation d'une vente
 * 3. Cr√©ation d'un re√ßu (avec la correction du QR code)
 * 4. V√©rification que le re√ßu appara√Æt dans la liste
 * 5. Test de t√©l√©chargement PDF
 */

const API_BASE_URL = "http://localhost:8083";

async function testReceiptGenerationFix() {
  console.log("üß™ Test de la correction de g√©n√©ration de re√ßus");
  console.log(`üìç Backend: ${API_BASE_URL}`);

  try {
    // 1. Authentification
    console.log("\n1Ô∏è‚É£ Authentification...");
    const authResponse = await fetch(`${API_BASE_URL}/api/auth/signin`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        email: "admin@example.com",
        password: "admin123",
      }),
    });

    let token = null;
    if (authResponse.ok) {
      const authData = await authResponse.json();
      token = authData.accessToken;
      console.log("‚úÖ Authentification r√©ussie");
    } else {
      console.log("‚ùå √âchec de l'authentification");
      return;
    }

    // 2. Cr√©er une vente
    console.log("\n2Ô∏è‚É£ Cr√©ation d'une vente...");
    const saleData = {
      items: [
        {
          productId: 1,
          productName: "Produit Test Correction",
          quantity: 2,
          unitPrice: 25.0,
          discount: 5.0,
          totalPrice: 45.0,
        },
      ],
      totalAmount: 50.0,
      taxAmount: 10.0,
      discountAmount: 5.0,
      finalAmount: 55.0,
      paymentMethod: "CARD",
      customerName: "Client Test Correction",
      customerPhone: "0123456789",
      customerEmail: "client@test.com",
      notes: "Test de correction de g√©n√©ration de re√ßus",
    };

    const saleResponse = await fetch(`${API_BASE_URL}/api/sales`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(saleData),
    });

    if (!saleResponse.ok) {
      console.log("‚ùå Erreur cr√©ation vente:", saleResponse.status);
      return;
    }

    const saleResult = await saleResponse.json();
    const saleId = saleResult.id;
    console.log(`‚úÖ Vente cr√©√©e avec l'ID: ${saleId}`);

    // 3. Cr√©er un re√ßu (test de la correction)
    console.log("\n3Ô∏è‚É£ Cr√©ation d'un re√ßu (test de la correction)...");
    const receiptResponse = await fetch(
      `${API_BASE_URL}/api/receipts/create/${saleId}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
      }
    );

    if (!receiptResponse.ok) {
      const errorText = await receiptResponse.text();
      console.log("‚ùå Erreur cr√©ation re√ßu:", receiptResponse.status);
      console.log("üìä D√©tails:", errorText);
      return;
    }

    const receiptResult = await receiptResponse.json();
    console.log("‚úÖ Re√ßu cr√©√© avec succ√®s:", receiptResult);

    // V√©rifier que le re√ßu a un num√©ro g√©n√©r√©
    const receipt = receiptResult.receipt;
    if (receipt.receiptNumber) {
      console.log(`‚úÖ Num√©ro de re√ßu g√©n√©r√©: ${receipt.receiptNumber}`);
    } else {
      console.log("‚ùå PROBL√àME: Aucun num√©ro de re√ßu g√©n√©r√© !");
    }

    // V√©rifier que le QR code est g√©n√©r√©
    if (receipt.qrCodeData) {
      console.log(
        `‚úÖ QR Code g√©n√©r√©: ${receipt.qrCodeData.substring(0, 50)}...`
      );
    } else {
      console.log("‚ùå PROBL√àME: Aucun QR Code g√©n√©r√© !");
    }

    // 4. V√©rifier dans la liste des re√ßus
    console.log("\n4Ô∏è‚É£ V√©rification dans la liste des re√ßus...");
    const receiptsResponse = await fetch(`${API_BASE_URL}/api/receipts`, {
      method: "GET",
      headers: { Authorization: `Bearer ${token}` },
    });

    if (!receiptsResponse.ok) {
      console.log("‚ùå Erreur r√©cup√©ration re√ßus:", receiptsResponse.status);
      return;
    }

    const receiptsData = await receiptsResponse.json();
    const receipts = receiptsData.receipts || [];

    console.log(`üìã ${receipts.length} re√ßu(s) trouv√©(s)`);

    if (receipts.length > 0) {
      console.log("‚úÖ SUCC√àS ! Les re√ßus apparaissent dans la liste:");
      receipts.forEach((receipt, index) => {
        console.log(
          `  ${index + 1}. ID: ${receipt.id}, Num√©ro: ${
            receipt.receiptNumber
          }, Montant: ${receipt.finalAmount}‚Ç¨`
        );
      });

      // V√©rifier que notre re√ßu est dans la liste
      const ourReceipt = receipts.find((r) => r.id === receipt.id);
      if (ourReceipt) {
        console.log("üéâ PARFAIT ! Notre re√ßu cr√©√© est bien dans la liste !");

        // V√©rifier les d√©tails du re√ßu
        console.log("üìÑ D√©tails du re√ßu cr√©√©:");
        console.log(`   - ID: ${ourReceipt.id}`);
        console.log(`   - Num√©ro: ${ourReceipt.receiptNumber}`);
        console.log(`   - Montant total: ${ourReceipt.totalAmount}‚Ç¨`);
        console.log(`   - Montant final: ${ourReceipt.finalAmount}‚Ç¨`);
        console.log(`   - Client: ${ourReceipt.customerName}`);
        console.log(`   - Date: ${ourReceipt.createdAt}`);
        console.log(`   - Statut: ${ourReceipt.status}`);
        console.log(`   - QR Code: ${ourReceipt.qrCodeData ? "Oui" : "Non"}`);
      } else {
        console.log(
          "‚ö†Ô∏è Notre re√ßu n'est pas dans la liste (probl√®me de persistance)"
        );
      }
    } else {
      console.log("‚ùå √âCHEC ! Aucun re√ßu dans la liste");
    }

    // 5. Test de t√©l√©chargement PDF (optionnel)
    console.log("\n5Ô∏è‚É£ Test de t√©l√©chargement PDF...");
    try {
      const pdfResponse = await fetch(
        `${API_BASE_URL}/api/receipts/${receipt.id}/pdf`,
        {
          method: "GET",
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      if (pdfResponse.ok) {
        console.log("‚úÖ PDF g√©n√©r√© avec succ√®s");
        console.log(
          `üìä Taille du PDF: ${pdfResponse.headers.get("content-length")} bytes`
        );
      } else {
        console.log("‚ö†Ô∏è Erreur g√©n√©ration PDF:", pdfResponse.status);
      }
    } catch (pdfError) {
      console.log("‚ö†Ô∏è Erreur lors du test PDF:", pdfError.message);
    }

    console.log("\nüéâ Test de correction termin√© avec succ√®s !");
    console.log("‚úÖ La g√©n√©ration de re√ßus fonctionne maintenant correctement");
  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error);
  }
}

// Ex√©cuter le test
if (typeof window !== "undefined") {
  window.testReceiptGenerationFix = testReceiptGenerationFix;
  console.log(
    "üöÄ Script de test charg√©. Ex√©cutez testReceiptGenerationFix() pour lancer le test."
  );
} else {
  testReceiptGenerationFix();
}
