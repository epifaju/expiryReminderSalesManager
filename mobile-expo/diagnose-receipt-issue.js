/**
 * Script de diagnostic pour identifier le probl√®me avec les re√ßus
 *
 * Ce script v√©rifie :
 * 1. La configuration du backend (port, base de donn√©es)
 * 2. L'existence de la table receipts
 * 3. La cr√©ation et r√©cup√©ration de re√ßus
 * 4. Les logs d√©taill√©s
 */

const API_BASE_URL = "http://192.168.1.16:8082"; // Utilisez votre IP et port

async function diagnoseReceiptIssue() {
  console.log("üîç Diagnostic du probl√®me de re√ßus");
  console.log(`üìç URL du backend: ${API_BASE_URL}`);

  try {
    // 1. V√©rifier la sant√© du backend
    console.log("\n1Ô∏è‚É£ V√©rification de la sant√© du backend...");

    try {
      const healthResponse = await fetch(`${API_BASE_URL}/actuator/health`);
      if (healthResponse.ok) {
        const healthData = await healthResponse.json();
        console.log("‚úÖ Backend accessible:", healthData);
      } else {
        console.log("‚ö†Ô∏è Backend accessible mais pas de health endpoint");
      }
    } catch (error) {
      console.log("‚ùå Backend non accessible:", error.message);
      console.log("üí° V√©rifiez que le backend est d√©marr√© et accessible");
      return;
    }

    // 2. Se connecter pour obtenir un token
    console.log("\n2Ô∏è‚É£ Authentification...");

    const authResponse = await fetch(`${API_BASE_URL}/api/auth/signin`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        email: "admin@example.com", // Essayez diff√©rents utilisateurs
        password: "admin123",
      }),
    });

    let token = null;
    if (authResponse.ok) {
      const authData = await authResponse.json();
      token = authData.accessToken;
      console.log("‚úÖ Authentification r√©ussie");
    } else {
      console.log("‚ö†Ô∏è √âchec de l'authentification, essayons sans token...");
      console.log("üìä D√©tails:", await authResponse.text());
    }

    // 3. V√©rifier les ventes existantes
    console.log("\n3Ô∏è‚É£ V√©rification des ventes existantes...");

    const salesHeaders = token ? { Authorization: `Bearer ${token}` } : {};
    const salesResponse = await fetch(`${API_BASE_URL}/api/sales`, {
      method: "GET",
      headers: salesHeaders,
    });

    if (salesResponse.ok) {
      const salesData = await salesResponse.json();
      console.log(
        `‚úÖ ${
          salesData.content?.length || salesData.length || 0
        } vente(s) trouv√©e(s)`
      );

      if (salesData.content && salesData.content.length > 0) {
        console.log("üìã Premi√®re vente:", salesData.content[0]);
        return salesData.content[0].id; // Retourner l'ID de la premi√®re vente
      } else if (Array.isArray(salesData) && salesData.length > 0) {
        console.log("üìã Premi√®re vente:", salesData[0]);
        return salesData[0].id;
      } else {
        console.log("‚ùå Aucune vente trouv√©e");
        return null;
      }
    } else {
      console.log(
        "‚ùå Erreur lors de la r√©cup√©ration des ventes:",
        salesResponse.status
      );
      console.log("üìä D√©tails:", await salesResponse.text());
      return null;
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du diagnostic:", error);
    return null;
  }
}

async function testReceiptCreationWithSale(saleId) {
  console.log(`\n4Ô∏è‚É£ Test de cr√©ation de re√ßu pour la vente ${saleId}...`);

  try {
    // Se reconnecter pour obtenir un token
    const authResponse = await fetch(`${API_BASE_URL}/api/auth/signin`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        email: "admin@example.com",
        password: "admin123",
      }),
    });

    let token = null;
    if (authResponse.ok) {
      const authData = await authResponse.json();
      token = authData.accessToken;
    }

    // Cr√©er un re√ßu
    const receiptHeaders = {
      "Content-Type": "application/json",
    };

    if (token) {
      receiptHeaders["Authorization"] = `Bearer ${token}`;
    }

    console.log("üì§ Envoi de la requ√™te de cr√©ation de re√ßu...");
    const receiptResponse = await fetch(
      `${API_BASE_URL}/api/receipts/create/${saleId}`,
      {
        method: "POST",
        headers: receiptHeaders,
      }
    );

    console.log(`üìä Status de la r√©ponse: ${receiptResponse.status}`);
    console.log(
      `üìä Headers de la r√©ponse:`,
      Object.fromEntries(receiptResponse.headers.entries())
    );

    if (receiptResponse.ok) {
      const receiptResult = await receiptResponse.json();
      console.log("‚úÖ Re√ßu cr√©√© avec succ√®s:", receiptResult);

      // V√©rifier imm√©diatement dans la liste
      console.log("\n5Ô∏è‚É£ V√©rification dans la liste des re√ßus...");

      const receiptsResponse = await fetch(`${API_BASE_URL}/api/receipts`, {
        method: "GET",
        headers: token ? { Authorization: `Bearer ${token}` } : {},
      });

      if (receiptsResponse.ok) {
        const receiptsData = await receiptsResponse.json();
        console.log(
          `üìã ${receiptsData.receipts?.length || 0} re√ßu(s) dans la liste`
        );

        if (receiptsData.receipts && receiptsData.receipts.length > 0) {
          console.log("‚úÖ Re√ßus trouv√©s dans la liste:");
          receiptsData.receipts.forEach((receipt, index) => {
            console.log(
              `  ${index + 1}. ID: ${receipt.id}, Num√©ro: ${
                receipt.receiptNumber
              }, Montant: ${receipt.finalAmount}‚Ç¨`
            );
          });
        } else {
          console.log(
            "‚ùå Aucun re√ßu dans la liste - Probl√®me de persistance !"
          );
        }
      } else {
        console.log(
          "‚ùå Erreur lors de la r√©cup√©ration des re√ßus:",
          receiptsResponse.status
        );
        console.log("üìä D√©tails:", await receiptsResponse.text());
      }
    } else {
      const errorText = await receiptResponse.text();
      console.log(
        "‚ùå Erreur lors de la cr√©ation du re√ßu:",
        receiptResponse.status
      );
      console.log("üìä D√©tails:", errorText);
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error);
  }
}

async function runFullDiagnostic() {
  console.log("üöÄ Lancement du diagnostic complet...");

  const saleId = await diagnoseReceiptIssue();

  if (saleId) {
    await testReceiptCreationWithSale(saleId);
  } else {
    console.log("\nüí° Cr√©ons d'abord une vente de test...");

    try {
      const authResponse = await fetch(`${API_BASE_URL}/api/auth/signin`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: "admin@example.com",
          password: "admin123",
        }),
      });

      let token = null;
      if (authResponse.ok) {
        const authData = await authResponse.json();
        token = authData.accessToken;
      }

      // Cr√©er une vente de test
      const saleData = {
        items: [
          {
            productId: 1,
            productName: "Produit de test",
            quantity: 1,
            unitPrice: 10.0,
            discount: 0,
            totalPrice: 10.0,
          },
        ],
        totalAmount: 10.0,
        taxAmount: 0.0,
        discountAmount: 0.0,
        finalAmount: 10.0,
        paymentMethod: "CASH",
        customerName: "Client Test",
        notes: "Vente de test pour diagnostic",
      };

      const saleHeaders = {
        "Content-Type": "application/json",
      };

      if (token) {
        saleHeaders["Authorization"] = `Bearer ${token}`;
      }

      console.log("üì§ Cr√©ation d'une vente de test...");
      const saleResponse = await fetch(`${API_BASE_URL}/api/sales`, {
        method: "POST",
        headers: saleHeaders,
        body: JSON.stringify(saleData),
      });

      if (saleResponse.ok) {
        const saleResult = await saleResponse.json();
        console.log(`‚úÖ Vente cr√©√©e avec l'ID: ${saleResult.id}`);
        await testReceiptCreationWithSale(saleResult.id);
      } else {
        console.log(
          "‚ùå Erreur lors de la cr√©ation de la vente:",
          saleResponse.status
        );
        console.log("üìä D√©tails:", await saleResponse.text());
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la cr√©ation de vente:", error);
    }
  }
}

// Ex√©cuter le diagnostic
if (typeof window !== "undefined") {
  window.runFullDiagnostic = runFullDiagnostic;
  window.diagnoseReceiptIssue = diagnoseReceiptIssue;
  console.log(
    "üöÄ Script de diagnostic charg√©. Ex√©cutez runFullDiagnostic() pour lancer le diagnostic complet."
  );
} else {
  runFullDiagnostic();
}
