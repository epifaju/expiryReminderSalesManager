// Script de test pour l'API de re√ßus PDF
const axios = require('axios');

const BASE_URL = 'http://localhost:8082';

async function testReceiptAPI() {
    try {
        console.log('üß™ Test de l\'API de re√ßus PDF');
        console.log('================================');
        
        // 1. Connexion
        console.log('1. Connexion...');
        const loginResponse = await axios.post(`${BASE_URL}/auth/signin`, {
            username: 'admin',
            password: 'admin123'
        });
        
        const token = loginResponse.data.token;
        console.log('‚úÖ Connexion r√©ussie');
        
        const headers = {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        };
        
        // 2. R√©cup√©rer les ventes
        console.log('\n2. R√©cup√©ration des ventes...');
        const salesResponse = await axios.get(`${BASE_URL}/sales`, { headers });
        const sales = salesResponse.data.content;
        console.log(`‚úÖ ${sales.length} ventes trouv√©es`);
        
        if (sales.length === 0) {
            console.log('‚ùå Aucune vente disponible pour tester');
            return;
        }
        
        // 3. Lister les re√ßus existants
        console.log('\n3. Liste des re√ßus existants...');
        const receiptsResponse = await axios.get(`${BASE_URL}/api/receipts`, { headers });
        console.log(`‚úÖ ${receiptsResponse.data.receipts.length} re√ßus existants`);
        
        // 4. Tester la cr√©ation d'un re√ßu
        console.log('\n4. Test de cr√©ation d\'un re√ßu...');
        const firstSale = sales[0];
        console.log(`   Vente ID: ${firstSale.id}, Num√©ro: ${firstSale.saleNumber}`);
        
        try {
            const createResponse = await axios.post(`${BASE_URL}/api/receipts/create/${firstSale.id}`, {}, { headers });
            console.log('‚úÖ Re√ßu cr√©√© avec succ√®s !');
            console.log(`   Num√©ro de re√ßu: ${createResponse.data.receipt.receiptNumber}`);
            
            const receiptId = createResponse.data.receipt.id;
            
            // 5. Tester le t√©l√©chargement PDF
            console.log('\n5. Test de t√©l√©chargement PDF...');
            try {
                const pdfResponse = await axios.get(`${BASE_URL}/api/receipts/${receiptId}/pdf`, {
                    headers,
                    responseType: 'arraybuffer'
                });
                console.log('‚úÖ PDF g√©n√©r√© avec succ√®s !');
                console.log(`   Taille du PDF: ${pdfResponse.data.length} bytes`);
            } catch (pdfError) {
                console.log('‚ùå Erreur lors de la g√©n√©ration PDF:', pdfError.response?.data?.error || pdfError.message);
            }
            
        } catch (createError) {
            console.log('‚ùå Erreur lors de la cr√©ation du re√ßu:', createError.response?.data?.error || createError.message);
            
            if (createError.response?.status === 400) {
                console.log('   üí° Suggestion: L\'utilisateur admin n\'est peut-√™tre pas le cr√©ateur de cette vente');
            }
        }
        
        // 6. Liste finale des re√ßus
        console.log('\n6. Liste finale des re√ßus...');
        const finalReceiptsResponse = await axios.get(`${BASE_URL}/api/receipts`, { headers });
        console.log(`‚úÖ ${finalReceiptsResponse.data.receipts.length} re√ßus au total`);
        
        console.log('\nüéâ Test termin√© !');
        
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', error.message);
        if (error.response) {
            console.error('   Status:', error.response.status);
            console.error('   Data:', error.response.data);
        }
    }
}

// Ex√©cuter le test
testReceiptAPI();
